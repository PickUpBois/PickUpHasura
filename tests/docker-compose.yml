version: '3.7'
services:
  express:
    container_name: express
    build: ../express-server
    volumes:
      - ../express-server/src:/app/src
    command: ["npm", "run", "start"]
    environment: 
        PORT: 3000
        HASURA_GRAPHQL_URL: http://hasura:5000/v1/graphql
  postgres:
    container_name: postgres
    image: postgis/postgis:12-master
    environment:
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${DATABASE}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      - ./db_init_scripts:/docker-entrypoint-initdb.d
      - ../hasura/migrations/default:/migrations
  hasura:
    image: hasura/graphql-engine:v2.0.1.cli-migrations-v3
    container_name: hasura
    ports:
    - 5000:5000
    depends_on:
    - postgres
    restart: always
    links: 
      - express
      - postgres
    volumes:
      - ../hasura/metadata:/hasura-metadata
      - ../hasura/migrations:/hasura-migrations
      - ../scripts/:/scripts
    entrypoint: ["/scripts/wait-for-it.sh", "postgres:5432", "--", "docker-entrypoint.sh"]
    command: ["graphql-engine", "serve"]
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${PG_USER}:${PASSWORD}@postgres:5432/${DATABASE}
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
      ACTION_BASE_URL: http://express:3000/actions
      HASURA_GRAPHQL_SERVER_PORT: 5000
      EVENT_BASE_URL: http://express:3000/events
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
  test:
    build: .
    container_name: test
    volumes:
      - ./src:/app/src
    depends_on: 
      - postgres
      - express
      - hasura
    environment:
      HASURA_GRAPHQL_URL: http://hasura:5000/v1/graphql
      DATABASE_URL: postgres://${PG_USER}:${PASSWORD}@postgres:5432/${DATABASE}
      EXPRESS_EVENTS_URL: http://express:3000/events

    command: ["wait-for-it", "--service", "postgres:5432", "--service", "hasura:5000", "--service", "express:3000", "--", "pytest"]
networks:
  webnet: